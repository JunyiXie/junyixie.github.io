<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>virtual machine on xiejunyi blog</title>
    <link>http://localhost:1313/categories/virtual-machine/</link>
    <description>Recent content in virtual machine on xiejunyi blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 17 Feb 2023 15:43:48 +0800</lastBuildDate><atom:link href="http://localhost:1313/categories/virtual-machine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WebAssembly Runtime Performance Notes</title>
      <link>http://localhost:1313/post/wasm-performance/</link>
      <pubDate>Fri, 17 Feb 2023 15:43:48 +0800</pubDate>
      
      <guid>http://localhost:1313/post/wasm-performance/</guid>
      <description>Introduction WebAssembly has huge implications for the web platform — it provides a way to run code written in multiple languages on the web at near native speed, with client apps running on the web that previously couldn&amp;rsquo;t have done so.
WebAssembly is designed to complement and run alongside JavaScript — using the WebAssembly JavaScript APIs, you can load WebAssembly modules into a JavaScript app and share functionality between the two.</description>
    </item>
    
    <item>
      <title>Interpreter Performance Optimization And Design: Key Papers</title>
      <link>http://localhost:1313/post/interpreter-performance-optimization-design-references/</link>
      <pubDate>Wed, 31 Aug 2022 15:43:48 +0800</pubDate>
      
      <guid>http://localhost:1313/post/interpreter-performance-optimization-design-references/</guid>
      <description>Introduction In the past two years, when I was working in ByteDance, I did a lot of work on the design and optimization the Python interpreter. This article lists the papers that I find very helpful.
https://www.reddit.com/r/programming/comments/wzrcb/implementing_fast_interpreters/
Vmgen—a generator of efficient virtual machine interpreters
https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.16.7676&amp;amp;rep=rep1&amp;amp;type=pdf
Trace-based just-in-time type specialization for dynamic languages
Optimization of dynamic languages using hierarchical layering of virtual machines
Virtual machine showdown: Stack versus registers
Virtual-Machine Abstraction and Optimization Techniques</description>
    </item>
    
    <item>
      <title>Python Interpreter Performance Optimizations In 3.6 ~ 3.11</title>
      <link>http://localhost:1313/post/python-performance-optimizations-between-3.6-and-3.11.md/</link>
      <pubDate>Sun, 31 Jul 2022 15:43:48 +0800</pubDate>
      
      <guid>http://localhost:1313/post/python-performance-optimizations-between-3.6-and-3.11.md/</guid>
      <description>3.11 Cheaper, lazy Python frames, 3-7% speedup in pyperformance (Contributed by Mark Shannon in bpo-44590.) Streamlined the frame creation process. Avoided memory allocation by generously re-using frame space on the C stack. Streamlined the internal frame struct to contain only essential information. Frames previously held extra debugging and memory management information. Inlined Python function calls, measured a 1-3% improvement in pyperformance. (Contributed by Pablo Galindo and Mark Shannon in bpo-45256.) In 3.</description>
    </item>
    
    <item>
      <title>cpython ARM64 baseline-JIT Implementation, 20% speed up</title>
      <link>http://localhost:1313/post/cpython-arm-jit/</link>
      <pubDate>Wed, 24 Nov 2021 15:43:48 +0800</pubDate>
      
      <guid>http://localhost:1313/post/cpython-arm-jit/</guid>
      <description>背景 目前开源并没有可参考的，完善的，有显著性能提升的，ARM64下的cpython JIT实现。只能我们参考已由的x86架构下的实现方案，在A</description>
    </item>
    
    <item>
      <title>Implementation Python Interpreter Parallel in Python 3.10</title>
      <link>http://localhost:1313/post/python-interpreter-parallell/</link>
      <pubDate>Wed, 31 Mar 2021 15:43:48 +0800</pubDate>
      
      <guid>http://localhost:1313/post/python-interpreter-parallell/</guid>
      <description>在业务场景中，我们通过cpython执行算法包，由于cpython的实现，在一个进程内，无法利用CPU的多个核心去同时执行算法包。对此，我们</description>
    </item>
    
  </channel>
</rss>
